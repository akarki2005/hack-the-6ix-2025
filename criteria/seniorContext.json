{
  "diffFiles": [
    {
      "path": "src/pages/completed.js",
      "status": "modified",
      "patch": "@@ -1,9 +1,12 @@\n import { useState, useEffect } from 'react';\n import { useRouter } from 'next/router';\n import { Badge } from '@/components/ui/badge';\n+import { Input } from '@/components/ui/input';\n \n export default function Completed() {\n   const [completedTasks, setCompletedTasks] = useState([]);\n+  // Search query for filtering completed tasks\n+  const [search, setSearch] = useState('');\n   const router = useRouter();\n \n   useEffect(() => {\n@@ -30,6 +33,11 @@ export default function Completed() {\n       priorityWeight[a.priority ?? 'Low'] - priorityWeight[b.priority ?? 'Low'],\n   );\n \n+  // Only show completed tasks whose text includes the search query (case-insensitive)\n+  const filteredCompleted = sortedCompleted.filter((task) =>\n+    task.text.toLowerCase().includes(search.toLowerCase()),\n+  );\n+\n   return (\n     <div className=\"min-h-screen bg-gray-50 py-8\">\n       <div className=\"max-w-md mx-auto bg-white rounded-lg shadow-md p-6\">\n@@ -45,15 +53,27 @@ export default function Completed() {\n \n         <div>\n           <h2 className=\"text-lg font-semibold mb-3 text-gray-700\">\n-            Completed ({sortedCompleted.length})\n+            Completed ({filteredCompleted.length})\n           </h2>\n-          {sortedCompleted.length === 0 ? (\n+          {/* Search bar */}\n+          <Input\n+            type=\"text\"\n+            value={search}\n+            onChange={(e) => setSearch(e.target.value)}\n+            className=\"mb-4\"\n+            placeholder=\"Search completed tasks...\"\n+          />\n+          {completedTasks.length === 0 ? (\n             <p className=\"text-gray-500 text-center py-4\">\n               No completed tasks yet.\n             </p>\n+          ) : filteredCompleted.length === 0 ? (\n+            <p className=\"text-gray-500 text-center py-4\">\n+              No completed tasks match your search.\n+            </p>\n           ) : (\n             <ul className=\"space-y-2\">\n-              {sortedCompleted.map((task) => (\n+              {filteredCompleted.map((task) => (\n                 <li\n                   key={task.id}\n                   className=\"p-3 bg-green-50 rounded-md border-l-4 border-green-500 flex items-center gap-2\"",
      "additions": 23,
      "deletions": 3
    },
    {
      "path": "src/pages/index.js",
      "status": "modified",
      "patch": "@@ -13,6 +13,8 @@ export default function Page() {\n \n   const [newTask, setNewTask] = useState('');\n   const [priority, setPriority] = useState('Low');\n+  // Search query for filtering\n+  const [search, setSearch] = useState('');\n   const router = useRouter();\n \n   useEffect(() => {\n@@ -80,6 +82,11 @@ export default function Page() {\n       priorityWeight[a.priority ?? 'Low'] - priorityWeight[b.priority ?? 'Low'],\n   );\n \n+  // Only show tasks whose text includes the search query (case-insensitive)\n+  const filteredTasks = sortedTasks.filter((task) =>\n+    task.text.toLowerCase().includes(search.toLowerCase()),\n+  );\n+\n   return (\n     <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n       <Card className=\"mx-auto w-full max-w-md\">\n@@ -112,15 +119,28 @@ export default function Page() {\n           <div>\n             <div className=\"flex items-center gap-2 mb-4\">\n               <h2 className=\"text-lg font-semibold\">Incomplete Tasks</h2>\n-              <Badge variant=\"secondary\">{tasks.length}</Badge>\n+              {/* Show number of tasks matching the current search */}\n+              <Badge variant=\"secondary\">{filteredTasks.length}</Badge>\n             </div>\n+            {/* Search bar */}\n+            <Input\n+              type=\"text\"\n+              value={search}\n+              onChange={(e) => setSearch(e.target.value)}\n+              className=\"mb-4\"\n+              placeholder=\"Search tasks...\"\n+            />\n             {tasks.length === 0 ? (\n               <p className=\"text-muted-foreground text-center py-4\">\n                 No tasks yet. Add one above!\n               </p>\n+            ) : filteredTasks.length === 0 ? (\n+              <p className=\"text-muted-foreground text-center py-4\">\n+                No tasks match your search.\n+              </p>\n             ) : (\n               <ul className=\"space-y-2\">\n-                {sortedTasks.map((task) => (\n+                {filteredTasks.map((task) => (\n                   <li\n                     key={task.id}\n                     className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\"",
      "additions": 22,
      "deletions": 2
    }
  ],
  "relatedFiles": [
    {
      "path": "src/pages/completed.tsx",
      "content": "import { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Separator } from '@/components/ui/separator';\r\n\r\nexport default function Page() {\r\n  const [completedTasks, setCompletedTasks] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem('completedTasks');\r\n    if (saved) {\r\n      setCompletedTasks(JSON.parse(saved));\r\n    }\r\n  }, []);\r\n\r\n  const priorityStyles = {\r\n    High: 'bg-red-500 text-white',\r\n    Medium: 'bg-yellow-500 text-white',\r\n    Low: 'bg-green-500 text-white',\r\n  };\r\n\r\n  const priorityWeight = {\r\n    High: 1,\r\n    Medium: 2,\r\n    Low: 3,\r\n  };\r\n\r\n  const sortedCompleted = [...completedTasks].sort(\r\n    (a, b) =>\r\n      priorityWeight[a.priority ?? 'Low'] - priorityWeight[b.priority ?? 'Low'],\r\n  );\r\n\r\n  const filteredCompleted = sortedCompleted.filter((task) =>\r\n    task.text.toLowerCase().includes(search.toLowerCase()),\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n      <Card className=\"mx-auto w-full max-w-md\">\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <h1 className=\"text-2xl font-bold\">Completed Tasks</h1>\r\n            <Button onClick={() => router.push('/')} variant=\"outline\">\r\n              Back\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <h2 className=\"text-lg font-semibold\">Completed</h2>\r\n            <Badge variant=\"secondary\">{filteredCompleted.length}</Badge>\r\n          </div>\r\n\r\n          <Input\r\n            type=\"text\"\r\n            value={search}\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            placeholder=\"Search completed tasks...\"\r\n          />\r\n\r\n          <Separator />\r\n\r\n          {completedTasks.length === 0 ? (\r\n            <p className=\"text-muted-foreground text-center py-4\">\r\n              No completed tasks yet.\r\n            </p>\r\n          ) : filteredCompleted.length === 0 ? (\r\n            <p className=\"text-muted-foreground text-center py-4\">\r\n              No completed tasks match your search.\r\n            </p>\r\n          ) : (\r\n            <ul className=\"space-y-2\">\r\n              {filteredCompleted.map((task) => (\r\n                <li\r\n                  key={task.id}\r\n                  className=\"flex items-center gap-2 p-3 bg-green-50 rounded-md border-l-4 border-green-500\"\r\n                >\r\n                  <Badge className={priorityStyles[task.priority ?? 'Low']}>\r\n                    {task.priority ?? 'Low'}\r\n                  </Badge>\r\n                  <span className=\"line-through\">{task.text}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
    },
    {
      "path": "src/pages/index.tsx",
      "content": "import { useState, useEffect, useRef } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Separator } from '@/components/ui/separator';\r\n\r\nexport default function Page() {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const [completedTasks, setCompletedTasks] = useState([]);\r\n\r\n  const [newTask, setNewTask] = useState('');\r\n  const [priority, setPriority] = useState('Low');\r\n  // Search query for filtering\r\n  const [search, setSearch] = useState('');\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const savedTasks = localStorage.getItem('tasks');\r\n    const savedCompleted = localStorage.getItem('completedTasks');\r\n    console.log(savedTasks, savedCompleted);\r\n    if (savedTasks) setTasks(JSON.parse(savedTasks));\r\n    if (savedCompleted) setCompletedTasks(JSON.parse(savedCompleted));\r\n  }, []);\r\n\r\n  const isInitialTasks = useRef(true);\r\n  useEffect(() => {\r\n    if (isInitialTasks.current) {\r\n      isInitialTasks.current = false;\r\n      return;\r\n    }\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const isInitialCompleted = useRef(true);\r\n  useEffect(() => {\r\n    if (isInitialCompleted.current) {\r\n      isInitialCompleted.current = false;\r\n      return;\r\n    }\r\n    localStorage.setItem('completedTasks', JSON.stringify(completedTasks));\r\n  }, [completedTasks]);\r\n\r\n  const addTask = () => {\r\n    if (newTask.trim()) {\r\n      setTasks([...tasks, { id: Date.now(), text: newTask.trim(), priority }]);\r\n      setNewTask('');\r\n      setPriority('Low');\r\n    }\r\n  };\r\n\r\n  const completeTask = (taskId) => {\r\n    const task = tasks.find((t) => t.id === taskId);\r\n    if (task) {\r\n      setCompletedTasks([...completedTasks, task]);\r\n      setTasks(tasks.filter((t) => t.id !== taskId));\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      addTask();\r\n    }\r\n  };\r\n\r\n  const priorityStyles = {\r\n    High: 'bg-red-500 text-white',\r\n    Medium: 'bg-yellow-500 text-white',\r\n    Low: 'bg-green-500 text-white',\r\n  };\r\n\r\n  const priorityWeight = {\r\n    High: 1,\r\n    Medium: 2,\r\n    Low: 3,\r\n  };\r\n\r\n  const sortedTasks = [...tasks].sort(\r\n    (a, b) =>\r\n      priorityWeight[a.priority ?? 'Low'] - priorityWeight[b.priority ?? 'Low'],\r\n  );\r\n\r\n  // Only show tasks whose text includes the search query (case-insensitive)\r\n  const filteredTasks = sortedTasks.filter((task) =>\r\n    task.text.toLowerCase().includes(search.toLowerCase()),\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n      <Card className=\"mx-auto w-full max-w-md\">\r\n        <CardHeader>\r\n          <h1 className=\"text-2xl font-bold text-center\">Todo List</h1>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"flex gap-2\">\r\n            <Input\r\n              type=\"text\"\r\n              value={newTask}\r\n              onChange={(e) => setNewTask(e.target.value)}\r\n              onKeyDown={handleKeyDown}\r\n              placeholder=\"Enter a new task...\"\r\n            />\r\n            <select\r\n              value={priority}\r\n              onChange={(e) => setPriority(e.target.value)}\r\n              className=\"border rounded-md px-2 py-1 text-sm focus:outline-none\"\r\n            >\r\n              <option value=\"High\">High</option>\r\n              <option value=\"Medium\">Medium</option>\r\n              <option value=\"Low\">Low</option>\r\n            </select>\r\n            <Button onClick={addTask}>Add</Button>\r\n          </div>\r\n\r\n          <Separator />\r\n\r\n          <div>\r\n            <div className=\"flex items-center gap-2 mb-4\">\r\n              <h2 className=\"text-lg font-semibold\">Incomplete Tasks</h2>\r\n              {/* Show number of tasks matching the current search */}\r\n              <Badge variant=\"secondary\">{filteredTasks.length}</Badge>\r\n            </div>\r\n            {/* Search bar */}\r\n            <Input\r\n              type=\"text\"\r\n              value={search}\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              className=\"mb-4\"\r\n              placeholder=\"Search tasks...\"\r\n            />\r\n            {tasks.length === 0 ? (\r\n              <p className=\"text-muted-foreground text-center py-4\">\r\n                No tasks yet. Add one above!\r\n              </p>\r\n            ) : filteredTasks.length === 0 ? (\r\n              <p className=\"text-muted-foreground text-center py-4\">\r\n                No tasks match your search.\r\n              </p>\r\n            ) : (\r\n              <ul className=\"space-y-2\">\r\n                {filteredTasks.map((task) => (\r\n                  <li\r\n                    key={task.id}\r\n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\"\r\n                  >\r\n                    <span>{task.text}</span>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Badge className={priorityStyles[task.priority ?? 'Low']}>\r\n                        {task.priority ?? 'Low'}\r\n                      </Badge>\r\n                      <Button\r\n                        onClick={() => completeTask(task.id)}\r\n                        size=\"sm\"\r\n                        variant=\"default\"\r\n                      >\r\n                        Complete\r\n                      </Button>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n\r\n          <Separator />\r\n\r\n          <div className=\"text-center\">\r\n            <Button\r\n              onClick={() => router.push('/completed')}\r\n              variant=\"outline\"\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              View Completed Tasks\r\n              <Badge variant=\"secondary\">{completedTasks.length}</Badge>\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
    }
  ],
  "techStack": {
    "languages": [
      "JavaScript",
      "TypeScript"
    ],
    "frameworks": [
      "next",
      "react"
    ],
    "libraries": [
      "@radix-ui/react-separator",
      "@radix-ui/react-slot",
      "class-variance-authority",
      "clsx",
      "lucide-react",
      "react-dom",
      "shadcn",
      "tailwind-merge"
    ],
    "testFrameworks": [],
    "tooling": [
      "eslint",
      "prettier"
    ]
  }
}